<%= form_tag(nil, { :method=>"get", :id => "spotd_form" }) %>
<h1>Spotd</h1>
<h2>Real Time view of flagged elements by the community</h2>
<ul class='types'>
	<li><%= check_box 'show', 'image_set', { :class => 'checkbox' } -%> Images</li>
	<li><%= check_box 'show', 'comment', { :class => 'checkbox' } -%> Comments</li>
	<li><%= check_box 'show', 'fave', { :class => 'checkbox' } -%> Faves</li>
	<li><%= check_box 'show', 'flag', { :class => 'checkbox' } -%> Flags</li>
	<li><%= check_box 'show', 'rate', { :class => 'checkbox' } -%> Rated</li>
	<li><%= check_box 'show', 'vote', { :class => 'checkbox' } -%> Voted</li>
</ul>
<p class="stronger">Control: <a href='#' id="flow_control" class="pause">pause</a></p>
<div id="spot">
	<div class="header">
		<span class="what">what</span>
		<span class="link">link</span>
		<span class="who">who</span>
	</div>
	<div id="recs"></div>
</div>
<%= end_form_tag %>
<script type="text/javascript">
	
  Event.addBehavior({
    ".checkbox": function(event) {
      this.checked = true;
    },
    ".checkbox:click": function(event) {
      update_list();
    },
    "a#flow_control:click": function(event) {
      controlFlow(this);
      return false;
    }
  });
	function controlFlow(link){
		if (link.className == 'play'){
			link.className = 'pause';
			link.innerHTML = 'pause';
			link.title = 'pause';
			refresher.start();
		} else {
			link.className = 'play';
			link.innerHTML = 'play';
			link.title = 'play';
			refresher.stop();
			
		}
	}
	
	var FlowControl = Class.create();
	FlowControl.prototype = {
		initialize: function(){
			this.running = false;
			this.start();
		},
		start: function(){
			this.runner = new PeriodicalExecuter(spotd, scroll_delay);
			this.running = true;
		},
		stop: function(){
			this.runner.stop();
			this.running = false;
		}
	}
	
	var Delay = Class.create();
	Delay.prototype = {
		initialize: function(secs){
			this.max_delay = 60;
			this.delay_rate = .25;
			this.delay = secs;
			this.current_delay = secs;
		},
		decay: function(){
			if (this.max_delay > this.current_delay){
				this.current_delay = this.current_delay * (1 + this.delay_rate);
			} else {
				this.current_delay = this.max_delay;
			}
			return this.current_delay;
		},
		reset: function(){
			this.current_delay = this.delay;
		}
	}
	
	function update_list(){
		refresher.stop();
		opt = {
	    postBody: Form.serialize('spotd_form')+'&since='+serverTime+'&l='+total_lines,
	    onLoading:'',
			onSuccess:function(r){
				eval(r.responseText);
				current_line = 0;
				if (list.length == 0){
					setTimeout(update_list, update_delay.decay()*1000);
				} else {
					update_delay.reset();
					refresher.start();
				}
			}
		}
		new Ajax.CustomRequest('/audit/list', opt);
	}
	
	function spotd(){
		if (current_line == list.length ){
			update_list();
		} else {
			spotRender();
		}
	}
	
	function spotRender(){
		//Create new record
		message_link = build_redirect_link(list[current_line].section, list[current_line].section_id, list[current_line].message);
		who_link = $B('a', { href: '/profile/'+ list[current_line].who }, list[current_line].who);
		rec = $B('div', { className: 'rec' }, [
						$B('span', { className: 'what'}, list[current_line].what),
						$B('span', { className: 'link'}, [message_link]),
						$B('span', { className: 'who'}, [who_link])
					]);
		//remove last record if total_lines == # of recs
		if ($('recs').down()){
			top_rec = $('recs').down();
			if (top_rec.siblings().length == total_lines - 1){
				Element.remove(top_rec.siblings().last());
			}
		}
		//insert new rec at top
		$('recs').insertBefore(rec, $('recs').down() );
		top_rec = $('recs').down();
		new Effect.Highlight( top_rec , { duration: 2});
		//fade the last five elements
		if (top_rec.siblings().length == total_lines - 1){
			siblings = $A(top_rec.siblings());
			$R(total_lines - 5,total_lines - 1, true).each(function(i){
				old_class = 'class-final-'+ (i-5).toString();
				new_class = 'class-final-'+ (i-4).toString();
				if (Element.hasClassName(siblings[i], old_class)){
					Element.removeClassName(siblings[i], old_class);
				}
				Element.addClassName(siblings[i], new_class);
			});
		}
		current_line++;
	}
	var list = <%= Audit.recent.collect{| audit | AuditPublic.new(audit) }.to_json %>;
	var current_line = 0;
	var total_lines = 10;
	var scroll_delay = 2;
	var update_delay = new Delay(2);
	var refresher = new FlowControl();
</script>